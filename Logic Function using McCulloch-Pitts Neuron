def mcp_neuron(inputs, weights, threshold):
net_input = sum(i * w for i, w in zip(inputs, weights)) return 1 if net_input >= threshold else 0
def AND_gate(x1, x2):
return mcp_neuron([x1, x2], [1, 1], 2) def OR_gate(x1, x2):
return mcp_neuron([x1, x2], [1, 1], 1) def NOT_gate(x):
return mcp_neuron([x], [-1], -0.5) def NOR_gate(x1, x2):
return mcp_neuron([x1, x2], [-1, -1], -0.5) def XOR_gate(x1, x2):
and1 = AND_gate(x1, NOT_gate(x2)) and2 = AND_gate(NOT_gate(x1), x2) return OR_gate(and1, and2)
print("AND Gate:") for x1 in [0, 1]:
for x2 in [0, 1]:
print(f"({x1},{x2}) -> {AND_gate(x1, x2)}") print("\nOR Gate:")
for x1 in [0, 1]:
for x2 in [0, 1]:
print(f"({x1},{x2}) -> {OR_gate(x1, x2)}") print("\nNOT Gate:")
for x in [0, 1]:
print(f"{x} -> {NOT_gate(x)}") print("\nNOR Gate:")
for x1 in [0, 1]:
for x2 in [0, 1]:
 
print(f"({x1},{x2}) -> {NOR_gate(x1, x2)}") print("\nXOR Gate:")
for x1 in [0, 1]:
for x2 in [0, 1]:
print(f"({x1},{x2}) -> {XOR_gate(x1, x2)}")
